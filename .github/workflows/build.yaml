name: CHIP wheels build

on: push

jobs:
    build_prepare:
        name: Prepare build
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.python-version.outputs.value }}
            channel: ${{ steps.version.outputs.channel }}
        steps:
            - name: Checkout build repository
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            - name: Get version
              id: version
              shell: bash
              run: |
                version=$(echo "${{ github.ref }}" | awk -F"/" '{print $NF}')
                if [[ ! -z "${{ github.event.inputs.version }}" ]]; then
                  version="${{ github.event.inputs.version }}"
                elif [[ "${version}" =~ (main|dev) ]]; then
                  today="$(date --utc '+%Y-%m-%d')"
                  midnight_timestamp="$(date --utc +%s --date=$today)"
                  calver_date="$(date --utc --date=$today '+%Y.%-m.dev%d')"
                  commit_count="$(git rev-list --count --since=$midnight_timestamp HEAD)"
                  commit_count="$(printf "%02d" ${commit_count})"
                  version="${calver_date}${commit_count}"
                fi
                echo "version=2023.2.2" >> "$GITHUB_OUTPUT"
            - name: Find-and-replace strings
              id: python-version
              uses: mad9000/actions-find-and-replace-string@3
              with:
                source: ${{ steps.version.outputs.version }}
                find: '-'
                replace: '_'
                replaceAll: true

    build_linux_python_lib:
        name: Build Python wheels for Linux (${{ matrix.arch.name }})
        needs: build_prepare

        strategy:
            matrix:
                arch:
                    #- name: x86_64
                    #  container: connectedhomeip/chip-build:0.6.18
                    #  runner: ubuntu-22.04
                    #- name: aarch64
                    #  container: agners/aarch64-chip-build:0.6.18
                    #  runner: ARM64
                    - name: armv7l
                      container: damienkastner/chip-build-crosscompile-armhf:0.6.25
                      runner: ubuntu-latest

        runs-on: ${{ matrix.arch.runner }}
        permissions:
            contents: write  # for actions/upload-release-asset to upload release asset

        defaults:
            run:
                working-directory: ./project-chip

        container:
            image: ${{ matrix.arch.container }}
            volumes:
                - "/tmp/log_output:/tmp/test_logs"
            options: --sysctl "net.ipv6.conf.all.disable_ipv6=0
                net.ipv4.conf.all.forwarding=1 net.ipv6.conf.all.forwarding=1"

        steps:
            - name: Dump GitHub context
              env:
                  GITHUB_CONTEXT: ${{ toJSON(github) }}
              run: echo "$GITHUB_CONTEXT"
              working-directory: ./
            - name: Checkout build repository
              uses: actions/checkout@v3
            - name: Checkout CHIP SDK repository
              uses: actions/checkout@v3
              with:
                  repository: project-chip/connectedhomeip
                  ref: 4088a77f557e8571a39338fad51a1d8eb0131d79
                  path: ./project-chip
            - name: Checkout submodules
              run: scripts/checkout_submodules.py --shallow --platform linux
            - name: Apply patches
              run: |
                  patch -p1 < ../0001-Support-custom-platform-tag.patch
                  patch -p1 < ../0002-Revert-Python-dependencies.patch
                  patch -p1 < ../0003-Use-data-as-platform-storage-location.patch
                  patch -p1 < ../0004-Drop-pygobject-dependency.patch
                  patch -p1 < ../0005-Fix-Objects.py-for-Python-3.11-compatibility.patch
                  patch -p1 < ../0006-Add-lookup-dicts-for-clusters-and-attributes.patch
            - name: Bootstrap
              run: scripts/build/gn_bootstrap.sh
            - name: Setup Build, Run Build and Run Tests for armv7l
              if: ${{ matrix.arch.name == 'armv7l'}}
              run: |
                  scripts/build/gn_gen.sh --args=" \
                                                  target_os=\"linux\" \
                                                  target_cpu=\"arm\" \
                                                  sysroot=\"/opt/raspberry-buster-armhf-sysroot\" \
                                                  enable_rtti=true \
                                                  enable_pylib=true \
                                                  chip_config_memory_debug_checks=false \
                                                  chip_config_memory_debug_dmalloc=false \
                                                  chip_mdns=\"minimal\" \
                                                  chip_python_version=\"${{ needs.build_prepare.outputs.version }}\"  \
                                                  chip_python_package_prefix=\"home-assistant-chip\" \
                                                  #chip_python_platform_tag=\"manylinux_2_31\" \
                                                  "
                  scripts/run_in_build_env.sh "ninja -C ./out chip-repl"
            - name: Setup Build, Run Build and Run Tests
              if: ${{ matrix.arch.name != 'armv7l'}}
              run: |
                  scripts/build/gn_gen.sh --args=" \
                                                  enable_rtti=true \
                                                  enable_pylib=true \
                                                  chip_config_memory_debug_checks=false \
                                                  chip_config_memory_debug_dmalloc=false \
                                                  chip_mdns=\"minimal\" \
                                                  chip_python_version=\"${{ needs.build_prepare.outputs.version }}\"  \
                                                  chip_python_package_prefix=\"home-assistant-chip\" \
                                                  chip_python_platform_tag=\"manylinux_2_31\" \
                                                  "
                  scripts/run_in_build_env.sh "ninja -C ./out chip-repl"
#            - name: Run Python library specific unit tests
#              run: |
#                  scripts/run_in_build_env.sh 'pip3 install ./out/controller/python/home_assistant_chip_core-${{ needs.build_prepare.outputs.version }}-cp37-abi3-manylinux_2_31_${{ matrix.arch.name }}.whl'
#                  scripts/run_in_build_env.sh 'pip3 install ./out/controller/python/home_assistant_chip_clusters-${{ needs.build_prepare.outputs.version }}-py3-none-any.whl'
#                  scripts/run_in_build_env.sh 'pip3 install ./out/controller/python/home_assistant_chip_repl-${{ needs.build_prepare.outputs.version }}-py3-none-any.whl'
#                  scripts/run_in_build_env.sh '(cd src/controller/python/test/unit_tests/ && python3 -m unittest -v)'
            - name: Upload wheels as artifacts
              uses: actions/upload-artifact@v3
              with:
                name: chip-wheels
                path: project-chip/out/controller/python/*.whl
            - name: Upload wheels as release assets
              uses: softprops/action-gh-release@v1
              if: startsWith(github.ref, 'refs/tags/')
              with:
                files: project-chip/out/controller/python/*.whl

